from unittest.mock import MagicMock

import cv2
import numpy as np
# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest

from app.services.image_process_service import ImageProcessService


class TestImageProcessService:

    #  Tests that analyze_x_ray returns the inference and a list of images
    @pytest.mark.asyncio
    async def test_happy_path(self, mocker):
        # Mock the necessary dependencies
        mock_crop_image = mocker.patch.object(ImageProcessService, '_crop_image')
        mock_crop_image.return_value = np.zeros((100, 100, 4), dtype=np.uint8)

        mock_enhance_image = mocker.patch.object(ImageProcessService, '_enhance_image')
        mock_enhance_image.return_value = np.zeros((100, 100, 4), dtype=np.uint8)

        mock_image_process = mocker.patch.object(ImageProcessService, '_image_process')
        mock_image_process.return_value = (np.zeros((100, 100, 4), dtype=np.uint8),
                                           np.zeros((100, 100, 4), dtype=np.uint8),
                                           np.zeros((100, 100, 4), dtype=np.uint8))

        mock_convert_ndarray_to_image = mocker.patch.object(ImageProcessService, '_convert_ndarray_to_image')
        mock_convert_ndarray_to_image.return_value = b'image_data'

        mock_infer_image = mocker.patch.object(ImageProcessService, '_infer_image')
        mock_infer_image.return_value = {'diagnosis': 'Caries', 'probability': 80}

        mock_add_text_to_image = mocker.patch.object(ImageProcessService, 'add_text_to_image')
        mock_add_text_to_image.return_value = np.zeros((100, 100, 4), dtype=np.uint8)

        # Call the method under test
        service = ImageProcessService(None)
        inference, images = await service.analyze_x_ray(b'image_data', 'token')

        # Assertions
        assert inference == {'diagnosis': 'Caries', 'probability': 80}
        assert len(images) == 3
        assert images[0] == b'image_data'
        assert images[1] == b'image_data'
        assert images[2] == b'image_data'

    def test_valid_input_image(self):
        # Arrange
        image = np.zeros((100, 100, 4), dtype=np.uint8)

        # Act
        result = ImageProcessService._enhance_image(image)

        # Assert
        assert result.shape == (100, 100, 4)

    def test_apply_magma_colormap_returns_image_with_magma_colormap(self):
        # Arrange
        image = np.zeros((100, 100, 4), dtype=np.uint8)

        # Act
        result = ImageProcessService._apply_magma_colormap(image)

        # Assert
        assert isinstance(result, np.ndarray)
        assert result.shape == (100, 100, 4)
        assert np.array_equal(result[:, :, :3],
                              cv2.applyColorMap(cv2.cvtColor(image, cv2.COLOR_BGRA2GRAY), cv2.COLORMAP_MAGMA))
        assert np.array_equal(result[:, :, 3], image[:, :, 3])

    def test_resize_image_correct_dimensions_transparent(self):
        # Create a sample image with transparency
        image = np.zeros((100, 100, 4), dtype=np.uint8)
        size = 50
        transparent = True

        # Call the method
        resized_image = ImageProcessService._resize_image_png(image, size, transparent)

        # Check the dimensions and transparency of the resized image
        assert resized_image.shape == (size, size, 4)
        assert np.all(resized_image[:, :, 3] == 0)
