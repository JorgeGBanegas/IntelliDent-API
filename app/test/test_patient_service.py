
# Generated by CodiumAI

# Dependencies:
# pip install pytest-mock
import pytest
from pytest_mock import mocker
from sqlalchemy.exc import IntegrityError

from app.Exceptions.persistence_exceptions import RecordAlreadyExistsException, IntegrityErrorException, \
    RecordNotFoundException
from app.models import Patient
from app.schemas.patient_schema import PatientCreate, PatientUpdate
from app.services.patient_service import PatientService


class TestPatientService:

    def test_add_patient_successfully(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = None  # Simulate that patient doesn't exist in the DB
        patient_service = PatientService(db_mock)
        patient_create = PatientCreate(first_name="John", last_name="Doe", date_of_birth="1990-01-01",
                                       phone_number="1234567890", email="john.doe@example.com", gender="M")
        user_id = "user123"

        # Act
        patient_service.add_patient(patient_create, user_id)

        # Assert
        db_mock.add.assert_called_once()
        db_mock.commit.assert_called_once()
        db_mock.refresh.assert_called_once()

    #  Tests that get_all_patients returns a list of patients with pagination
    def test_get_all_patients_with_pagination(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        patients_data = [
            Patient(patient_id=1, first_name="John", last_name="Doe", phone_number="1234567890"),
            Patient(patient_id=2, first_name="Jane", last_name="Smith", phone_number="9876543210")
            # ... add more patient objects as needed
        ]
        db_mock.query().with_entities().filter().order_by().offset().limit().all.return_value = patients_data
        patient_service = PatientService(db_mock)
        search_query = "John"
        page = 1
        limit = 10

        # Act
        patients_list = patient_service.get_all_patients(search_query, page, limit)

        # Assert
        assert len(patients_list) == len(patients_data)
        # ... perform further assertions based on the expected data

    #  Tests that get_patient_by_id returns a patient with a valid id
    def test_get_patient_by_id_with_valid_id(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        patient_service = PatientService(db_mock)
        patient_id = 1

        # Act
        patient_service.get_patient_by_id(patient_id)

        # Assert
        db_mock.query.assert_called_once_with(Patient)
        db_mock.query().get.assert_called_once_with(patient_id)

    #  Tests that update_patient successfully updates a patient with a valid id
    def test_update_patient_successfully_with_valid_id(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        patient_service = PatientService(db_mock)
        patient_id = 1
        patient_update = PatientUpdate(first_name="John", last_name="Doe", date_of_birth="1990-01-01", phone_number="1234567890", email="john.doe@example.com", gender="M")

        # Act
        patient_service.update_patient(patient_id, patient_update)

        # Assert
        db_mock.query.assert_called_once_with(Patient)
        db_mock.query().get.assert_called_once_with(patient_id)
        db_mock.commit.assert_called_once()
        db_mock.refresh.assert_called_once()

    #  Tests that add_patient raises RecordAlreadyExistsException if patient already exists
    def test_add_patient_raises_RecordAlreadyExistsException_if_patient_already_exists(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = True
        patient_service = PatientService(db_mock)
        patient_create = PatientCreate(first_name="John", last_name="Doe", date_of_birth="1990-01-01", phone_number="1234567890", email="john.doe@example.com", gender="M")
        user_id = "user123"

        # Act & Assert
        with pytest.raises(RecordAlreadyExistsException):
            patient_service.add_patient(patient_create, user_id)

    #  Tests that add_patient raises IntegrityErrorException if email already exists in database
    def test_add_patient_raises_IntegrityErrorException_if_email_already_exists_in_database(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        db_mock.query().filter().first.return_value = None  # Simulamos que el paciente no existe en la BD
        db_mock.add.side_effect = IntegrityError("Duplicate entry 'john.doe@example.com' for key 'email'", None, None)
        patient_service = PatientService(db_mock)
        patient_create = PatientCreate(first_name="John", last_name="Doe", date_of_birth="1990-01-01",
                                       phone_number="1234567890", email="john.doe@example.com", gender="M")
        user_id = "user123"

        # Act & Assert
        with pytest.raises(IntegrityErrorException):
            patient_service.add_patient(patient_create, user_id)

    def test_get_patient_by_id_raises_RecordNotFoundException_if_patient_with_id_does_not_exist(self, mocker):
        # Arrange
        db_mock = mocker.Mock()
        patient_service = PatientService(db_mock)
        patient_id = 1
        db_mock.query.return_value.get.return_value = None

        # Act & Assert
        with pytest.raises(RecordNotFoundException):
            patient_service.get_patient_by_id(patient_id)